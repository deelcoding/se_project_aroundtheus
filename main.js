!function(){"use strict";class e{constructor(e,t){this._formElement=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputElements.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableSubmitButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}resetValidation(){this._inputList.forEach((e=>{this._hideError(e)})),this._toggleButtonState()}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(),this._toggleButtonState()}}class t{constructor(e,t,s,r,n,i){this.name=e.name,this.link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._userId=i,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteCard=r,this._handleLikeToggle=n}_isLikedByUser(){return this._isLiked.some((e=>e._id===this._userId))}_updateLikeStatus(){const e=this._cardElement.querySelector(".card__heart");this._isLiked?e.classList.add("card__heart-active"):e.classList.remove("card__heart-active")}_setEventListeners(){this._cardElement.querySelector(".card__heart").addEventListener("click",(()=>{this._handleLikeToggle(this,this._id,this._isLiked)})),this._cardElement.querySelector(".card__trash").addEventListener("click",(()=>{this._handleDeleteCard(this._id)})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick({name:this.name,link:this.link})}))}handleLikeButton(){this._cardElement.querySelector(".card__heart").classList.toggle("card__heart-active")}handleTrashButton(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardElement.querySelector(".card__title").textContent=this.name,this._cardElement.querySelector(".card__image").src=this.link,this._cardElement.querySelector(".card__image").alt=this.name,this._updateLikeStatus(),this._setEventListeners(),this._cardElement}}class s{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.querySelector(".modal__close").addEventListener("click",(()=>this.close())),this._popup.addEventListener("mousedown",(e=>{e.target===this._popup&&this.close()}))}}class r extends s{constructor(e,t){super(e),this._submitCallback=t,this._form=this._popup.querySelector("form"),this._inputs=this._form.querySelectorAll("input"),this._submitButton=this._form.querySelector(".modal__button"),this._defaultButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setLoadingState(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._defaultButtonText}resetForm(){this._form.reset()}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._submitCallback(t)})),super.setEventListeners()}}document.querySelectorAll(".modal__close");const n=document.querySelector("#profile__edit"),i=document.querySelector("#profile-edit-modal"),o=(document.querySelector(".profile__name"),document.querySelector(".profile__description"),document.querySelector("#profile-title-input")),a=document.querySelector("#profile-description-input"),l=i.querySelector("#profile-edit"),c=(document.querySelector("#avatar-url-input"),document.querySelector(".profile__image"),document.querySelector(".cards__list"),document.querySelector(".profile__add-button")),d=document.querySelector("#add-card-modal"),u=(document.querySelector("#add-title-input"),document.querySelector("#add-url-input"),d.querySelector("#add-card-form")),h=document.querySelector("#preview-modal"),_=(h.querySelector(".modal__image"),h.querySelector(".modal__caption"),document.querySelector(".profile__avatar-container")),m=document.querySelector("#avatar-form"),p={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},E=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({renderer:e=>{const t=S(e);E.addItem(t)}},".cards__list");function S(e){const s=new t(e,"#card-template",(()=>function(e){q.open(e.name,e.link)}(e)),(e=>B(s,e)),((e,t,s)=>function(e,t,s){s?y.dislikeCard(t).then((t=>{e.handleLikeButton(t.likes)})).catch((e=>{console.error(e)})):y.likeCard(t).then((t=>{e.handleLikeButton(t.likes)})).catch((e=>{console.error(e)}))}(e,t,s)));return s.getView()}const v=new e(p,l),f=new e(p,u),b=new e(p,m);v.enableValidation(),f.enableValidation(),b.enableValidation();const y=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_request(e,t){let{method:s,body:r}=t;return fetch(`${this._baseUrl}${e}`,{headers:this._headers,method:s,body:r}).then((e=>this._checkResponse(e)))}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getInitialCards(){return this._request("/cards",{})}getUserInfo(){return this._request("/users/me",{about:"about",avatar:"avatar",name:"name",_id:"9ad20f72db0274ca5ee20ecb"})}setUserInfo(e){let{name:t,about:s}=e;return this._request("/users/me",{method:"PATCH",body:JSON.stringify({name:t,about:s})})}setUserAvatar(e){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:e})})}uploadCard(e){let{name:t,link:s}=e;return this._request("/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){let{cardId:t}=e;return this._request(`/cards/${t}`,{method:"DELETE"})}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"PUT"}).then(this._checkResponse)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{headers:this._headers,method:"DELETE"}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"9235985a-89e2-4166-9c58-9c8068c4f4bf","Content-Type":"application/json"}});y.getInitialCards().then((e=>{E.renderItems(e)})).catch((e=>console.log(e)));const L=new r("#profile-edit-modal",(function(e){L.setLoadingState(!0),y.setUserInfo({name:e.name,about:e.description}).then((e=>{I.setUserInformation({name:e.name,job:e.about}),L.close()})).catch((e=>console.error(e))).finally((()=>{L.setLoadingState(!1)}))}));L.setEventListeners(),n.addEventListener("click",(()=>{const e=I.getUserInformation();o.value=e.name,a.value=e.job,L.open()}));const g=new r("#add-card-modal",(function(e){g.setLoadingState(!0);const{title:t,url:s}=e;y.uploadCard({name:t,link:s}).then((e=>{E.addItem(S(e)),f.disableSubmitButton(),g.close(),g.resetForm()})).catch((e=>console.error(e))).finally((()=>{g.setLoadingState(!1)}))}));g.setEventListeners(),c.addEventListener("click",(()=>g.open()));const q=new class extends s{constructor(e){super(e),this._imageElement=this._popup.querySelector(".modal__image"),this._captionElement=this._popup.querySelector(".modal__caption")}open(e,t){this._imageElement.src=t,this._imageElement.alt=e,this._captionElement.textContent=e,super.open()}}("#preview-modal");q.setEventListeners();const k=new class extends s{constructor(e){super(e),this._form=this._popup.querySelector(".modal__form")}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}("#delete-picture-modal",B);k.setEventListeners();const C=new r("#avatar-modal",(function(e){C.setLoadingState(!0),y.setUserAvatar(e.avatar).then((e=>{I.setUserAvatar(e.avatar),b.disableSubmitButton(),C.close(),C.resetForm()})).catch((e=>console.error(e))).finally((()=>{C.setLoadingState(!1)}))}));C.setEventListeners(),_.addEventListener("click",(()=>C.open()));const I=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInformation(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement?this._avatarElement:""}}setUserInformation(e){let{name:t,job:s,avatar:r}=e;this._nameElement.textContent=t,this._jobElement.textContent=s,r&&(this._avatarElement.src=r)}setUserAvatar(e){this._avatarElement.src=e}}({nameSelector:".profile__name",jobSelector:".profile__description",avatarSelector:".profile__image"});function B(e,t){t?(k.setSubmitAction((()=>{y.deleteCard({cardId:t}).then((()=>{e.handleTrashButton(),console.log(`Successfully deleted card with ID: ${t}`),k.close()})).catch((e=>{console.error(e)}))})),k.open()):console.error("card._id is undefined")}y.getUserInfo().then((e=>{I.setUserInformation({name:e.name,job:e.about,avatar:e.avatar})})).catch((e=>console.error(e)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,